  <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Google Sheets Dropdown Lookup</title>
    <style>
        /* Add your CSS styles here */
    </style>
<link rel="stylesheet" href="https://ssl.gstatic.com/docs/script/css/add-ons1.css">
</head>
<body>
    <h1>Google Sheets Dropdown Lookup</h1>
    <form id="lookupForm">
        <label for="lookupField">Select a Value:</label>
        <select id="lookupField" name="lookupField"></select>
        <button type="submit">Lookup</button>
    </form>
    <div id="result"></div>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            populateDropdown();
        });

        function populateDropdown() {
            fetchGoogleSheetData().then(data => {
                const selectElement = document.getElementById('lookupField');
                data.forEach(item => {
                    const option = document.createElement('option');
                    option.text = item;
                    selectElement.add(option);
                });
            });
        }

        document.getElementById('lookupForm').addEventListener('submit', function(event) {
            event.preventDefault();
            const selectedValue = document.getElementById('lookupField').value;
            fetchGoogleSheetData(selectedValue).then(result => {
                document.getElementById('result').textContent = result;
            });
        });

        async function fetchGoogleSheetData() {
    const googleSheetURL = 'https://docs.google.com/spreadsheets/d/1MQeFkGK1tctZmyK201eBS4OD2qOGJyOoHI4c_5mxkn8/edit?usp=sharing';
    
    try {
        const response = await fetch(googleSheetURL);
        if (!response.ok) {
            throw new Error('Failed to fetch data from Google Sheet');
        }
        
        const csvData = await response.text();
        const rows = csvData.split('\n').map(row => row.split(','));
        // Assuming the first row contains headers
        const headers = rows[0];
        const data = rows.slice(1).map(row => {
            const rowData = {};
            headers.forEach((header, index) => {
                rowData[header] = row[index];
            });
            return rowData;
        });
        
        // Assuming you want to return an array of values from a specific column
        const columnValues = data.map(row => row['YourColumnName']);
        return columnValues;
    } catch (error) {
        console.error('Error fetching data from Google Sheet:', error);
        return [];
    }
}

    </script>
</body>
</html>
